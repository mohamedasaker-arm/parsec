name: Continuous Integration

on: [push, pull_request, workflow_dispatch]

jobs:
  all-providers:
    name: Various tests targeting a Parsec image with all providers included
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Use the following step when updating the `parsec-service-test-all` image
      - name: Build the container
        run: pushd e2e_tests/docker_image && docker build -t parsec-service-test-all -f parsec-service-test-all.Dockerfile . && popd
      - name: Run the container to execute the test script
        # run:
        #   docker run -v $(pwd):/tmp/parsec -w /tmp/parsec
        #   ghcr.io/parallaxsecond/parsec-service-test-all /tmp/parsec/ci.sh all
      # When running the container built on the CI
        run: docker run -v $(pwd):/tmp/parsec -w /tmp/parsec -t parsec-service-test-all /tmp/parsec/ci.sh all

  build-all-providers:
    name: Cargo check all-providers (current Rust stable & old compiler)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Use the following step when updating the `parsec-service-test-all` image
      - name: Build the container
        run: pushd e2e_tests/docker_image && docker build -t parsec-service-test-all -f parsec-service-test-all.Dockerfile . && popd
      - name: Run the container to execute the test script
        # run:
        #   docker run -v $(pwd):/tmp/parsec -w /tmp/parsec ghcr.io/parallaxsecond/parsec-service-test-all /tmp/parsec/ci.sh cargo-check
      # When running the container built on the CI
        run: docker run -v $(pwd):/tmp/parsec -w /tmp/parsec -t parsec-service-test-all /tmp/parsec/ci.sh cargo-check

  mbed-crypto-provider:
    name: Integration tests using Mbed Crypto provider
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Use the following step when updating the `parsec-service-test-all` image
      - name: Build the container
        run: pushd e2e_tests/docker_image && docker build -t parsec-service-test-all -f parsec-service-test-all.Dockerfile . && popd
      - name: Run the container to execute the test script
        # run:
        #   docker run -v $(pwd):/tmp/parsec -w /tmp/parsec ghcr.io/parallaxsecond/parsec-service-test-all /tmp/parsec/ci.sh mbed-crypto
      # When running the container built on the CI
        run: docker run -v $(pwd):/tmp/parsec -w /tmp/parsec -t parsec-service-test-all /tmp/parsec/ci.sh mbed-crypto

  pkcs11-provider:
    name: Integration tests using PKCS 11 provider
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Use the following step when updating the `parsec-service-test-all` image
      - name: Build the container
        run: pushd e2e_tests/docker_image && docker build -t parsec-service-test-all -f parsec-service-test-all.Dockerfile . && popd
      - name: Run the container to execute the test script
        # Not running stress tests because they fail, presumably because of the same issue as #264
        # run:
        #   docker run -v $(pwd):/tmp/parsec -w /tmp/parsec ghcr.io/parallaxsecond/parsec-service-test-all /tmp/parsec/ci.sh pkcs11 --no-stress-test
      # When running the container built on the CI
        run: docker run -v $(pwd):/tmp/parsec -w /tmp/parsec -t parsec-service-test-all /tmp/parsec/ci.sh pkcs11 --no-stress-test

  tpm-provider:
    name: Integration tests using TPM provider
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Use the following step when updating the `parsec-service-test-all` image
      - name: Build the container
        run: pushd e2e_tests/docker_image && docker build -t parsec-service-test-all -f parsec-service-test-all.Dockerfile . && popd
      - name: Run the container to execute the test script
        # run:
        #   docker run -v $(pwd):/tmp/parsec -w /tmp/parsec ghcr.io/parallaxsecond/parsec-service-test-all /tmp/parsec/ci.sh tpm
      # When running the container built on the CI
        run: docker run -v $(pwd):/tmp/parsec -w /tmp/parsec -t parsec-service-test-all /tmp/parsec/ci.sh tpm

  trusted-service-provider:
    name: Integration tests using Crypto Trusted Service provider
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Use the following step when updating the `parsec-service-test-all` image
      - name: Build the container
        run: pushd e2e_tests/docker_image && docker build -t parsec-service-test-all -f parsec-service-test-all.Dockerfile . && popd
      - name: Run the container to execute the test script
        # run:
        #   docker run -v $(pwd):/tmp/parsec -w /tmp/parsec ghcr.io/parallaxsecond/parsec-service-test-all /tmp/parsec/ci.sh trusted-service
        # When running the container built on the CI
        run: docker run -v $(pwd):/tmp/parsec -w /tmp/parsec -t parsec-service-test-all /tmp/parsec/ci.sh trusted-service

  cryptoauthlib-provider:
    name: Integration tests using CryptoAuthentication Library provider
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Use the following step when updating the `parsec-service-test-all` image
      - name: Build the container
        run: pushd e2e_tests/docker_image && docker build -t parsec-service-test-all -f parsec-service-test-all.Dockerfile . && popd
      - name: Run the container to execute the test script
        # Not running stress tests because rust-cryptoauthlib test-interface does not support required calls
        # run:
        #   docker run -v $(pwd):/tmp/parsec -w /tmp/parsec ghcr.io/parallaxsecond/parsec-service-test-all /tmp/parsec/ci.sh cryptoauthlib --no-stress-test
      # When running the container built on the CI
        run: docker run -v $(pwd):/tmp/parsec -w /tmp/parsec -t parsec-service-test-all /tmp/parsec/ci.sh cryptoauthlib --no-stress-test

  fuzz-test-checker:
    name: Check that the fuzz testing framework is still working
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Use the following step when updating the `parsec-service-test-all` image
      - name: Build the container
        run: pushd e2e_tests/docker_image && docker build -t parsec-service-test-all -f parsec-service-test-all.Dockerfile . && popd
      - name: Run the fuzz test script
        # Not running stress tests because rust-cryptoauthlib test-interface does not support required calls
        # run: ./fuzz.sh test
      # When running the container built on the CI
        run: CONTAINER_TAG=parsec-service-test-all ./fuzz.sh test

  on-disk-kim:
    name: OnDiskKIM E2E tests on all providers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Use the following step when updating the `parsec-service-test-all` image
      - name: Build the container
        run: pushd e2e_tests/docker_image && docker build -t parsec-service-test-all -f parsec-service-test-all.Dockerfile . && popd
      - name: Run the container to execute the test script
        # run:
        #   docker run -v $(pwd):/tmp/parsec -w /tmp/parsec ghcr.io/parallaxsecond/parsec-service-test-all /tmp/parsec/ci.sh on-disk-kim
      # When running the container built on the CI
        run: docker run -v $(pwd):/tmp/parsec -w /tmp/parsec -t parsec-service-test-all /tmp/parsec/ci.sh on-disk-kim

  cross-compilation:
    # Currently only the Mbed Crypto, PKCS 11, and TPM providers are tested as the other ones need to cross-compile other libraries.
    name: Cross-compile Parsec to various targets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Use the following step when updating the `parsec-service-test-cross-compile` image
      # - name: Build the container
      #   run: pushd e2e_tests/docker_image && docker build -t parsec-service-test-cross-compile -f parsec-service-test-cross-compile.Dockerfile . && popd
      - name: Run the container to execute the test script
        run:
          docker run -v $(pwd):/tmp/parsec -w /tmp/parsec ghcr.io/parallaxsecond/parsec-service-test-cross-compile /tmp/parsec/test/cross-compile.sh
        # When running the container built on the CI
        # run: docker run -v $(pwd):/tmp/parsec -w /tmp/parsec -t parsec-service-test-cross-compile /tmp/parsec/test/cross-compile.sh

  links:
    name: Check links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Link Checker
        uses: peter-evans/link-checker@v1
        with:
          args: -v -r *.md
      - name: Fail if there were link errors
        run: exit ${{ steps.lc.outputs.exit_code }}
